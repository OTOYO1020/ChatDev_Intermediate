python3 run.py --name "C_272" --task "Read the integer N from standard input, representing the length of the sequence A. Read the sequence A of N distinct non-negative integers from standard input. Initialize a variable 'max_even_sum' to store the maximum even sum found, starting with a value of -1 (indicating no valid sum found). Iterate through all pairs of elements in A using two nested loops (i, j) where i < j. For each pair (A[i], A[j]), calculate the sum 'current_sum = A[i] + A[j]'. Check if 'current_sum' is even:\n   - If it is even and greater than 'max_even_sum', update 'max_even_sum' with 'current_sum'. After checking all pairs, determine if 'max_even_sum' was updated from its initial value:\n   - If it remains -1, set the result to 'No even sum found'.\n   - Otherwise, set the result to 'max_even_sum'. Print the result.\n\nThis breakdown ensures that we handle the input correctly, check all necessary conditions, and produce the required output format." --subtask1 "Read the integer N from standard input, representing the length of the sequence A." --subtask2 "Read the sequence A of N distinct non-negative integers from standard input." --subtask3 "Initialize a variable 'max_even_sum' to store the maximum even sum found, starting with a value of -1 (indicating no valid sum found)." --subtask4 "Iterate through all pairs of elements in A using two nested loops (i, j) where i < j." --subtask5 "For each pair (A[i], A[j]), calculate the sum 'current_sum = A[i] + A[j]'." --subtask6 "Check if 'current_sum' is even:\n   - If it is even and greater than 'max_even_sum', update 'max_even_sum' with 'current_sum'." --subtask7 "After checking all pairs, determine if 'max_even_sum' was updated from its initial value:\n   - If it remains -1, set the result to 'No even sum found'.\n   - Otherwise, set the result to 'max_even_sum'." --subtask8 "Print the result.\n\nThis breakdown ensures that we handle the input correctly, check all necessary conditions, and produce the required output format."
python3 run.py --name "C_205" --task "Read three integers A, B, and C from standard input. Define a function 'power(base, exponent)' to compute the power of a number. In 'power', handle the case where the base is negative and the exponent is even or odd:\n   - If the exponent is even, return the square of the base raised to half the exponent.\n   - If the exponent is odd, return the base multiplied by the square of the base raised to half the exponent. Call 'power(A, C)' to compute the value of A raised to the power of C and store it in 'result_A'. Call 'power(B, C)' to compute the value of B raised to the power of C and store it in 'result_B'. Compare 'result_A' and 'result_B':\n   - If 'result_A' > 'result_B', store the result as 'A is greater'.\n   - If 'result_A' < 'result_B', store the result as 'B is greater'.\n   - If they are equal, store the result as 'A and B are equal'. Print the comparison result." --subtask1 "Read three integers A, B, and C from standard input." --subtask2 "Define a function 'power(base, exponent)' to compute the power of a number." --subtask3 "In 'power', handle the case where the base is negative and the exponent is even or odd:\n   - If the exponent is even, return the square of the base raised to half the exponent.\n   - If the exponent is odd, return the base multiplied by the square of the base raised to half the exponent." --subtask4 "Call 'power(A, C)' to compute the value of A raised to the power of C and store it in 'result_A'." --subtask5 "Call 'power(B, C)' to compute the value of B raised to the power of C and store it in 'result_B'." --subtask6 "Compare 'result_A' and 'result_B':\n   - If 'result_A' > 'result_B', store the result as 'A is greater'.\n   - If 'result_A' < 'result_B', store the result as 'B is greater'.\n   - If they are equal, store the result as 'A and B are equal'." --subtask7 "Print the comparison result."
