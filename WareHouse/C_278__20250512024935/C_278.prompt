Define the function 'process_twidai_operations(N: int, Q: int, operations: List[Tuple[int, int, int]]) -> List[str]' to handle the input parameters where N is the number of users and Q is the number of operations. Initialize a data structure to keep track of the following relationships between users, such as a dictionary of sets or a 2D list, to efficiently manage follow and unfollow operations. Iterate through the list of operations and for each operation, check the value of T_i to determine the type of operation (follow, unfollow, or check mutual following). If T_i = 1, add user A_i to the following list of user B_i, ensuring that duplicates are not added. If T_i = 2, remove user A_i from the following list of user B_i, ensuring that no error occurs if A_i is not following B_i. If T_i = 3, check if user A_i is following user B_i and if user B_i is following user A_i, and store the result as 'Yes' or 'No'. Collect all results from operations where T_i = 3 in the order they were processed. Return the collected results as a list of strings from the function 'process_twidai_operations'. Ensure that the function handles the constraints efficiently, especially considering the maximum values for N and Q. Print the output results for all operations where T_i = 3 in the order they were requested.