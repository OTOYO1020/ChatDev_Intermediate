Define the function 'count_paths(N: int, M: int, roads: List[Tuple[int, int]]) -> int' to handle the input parameters, where 'N' is the number of cities, 'M' is the number of roads, and 'roads' is a list of tuples representing the roads between cities. Parse the input to extract the values of 'N' and 'M', and the list of roads 'roads' from the input format. Initialize a graph representation using an adjacency list to store the roads between cities. Implement a breadth-first search (BFS) or dynamic programming approach to find the shortest path from City 1 to City N. Count the number of distinct shortest paths from City 1 to City N during the BFS or dynamic programming traversal. Ensure that the count of paths is calculated modulo (10^9 + 7) to handle large numbers. Return the final count of paths from City 1 to City N as the output of the function. Handle edge cases where there are no roads (M = 0) and ensure the function returns 0 in such cases. Test the function with various inputs to ensure correctness and performance within the given constraints. Document the function and its parameters clearly for future reference and usage.