Read integers N and Q from standard input, where N is the number of vertices and Q is the number of queries. Initialize a list 'X' of size N to store the integer values written on each vertex. Read the values for 'X' from standard input. Initialize an adjacency list 'tree' to represent the tree structure based on the edges provided. Read the edges (A_i, B_i) from standard input and populate the 'tree' adjacency list. For each query, read the pair of integers (V_i, K_i) from standard input. Implement a function 'find_kth_largest(V, K)' that:\n   - Traverses the subtree rooted at vertex V using Depth-First Search (DFS) to collect all values in that subtree.\n   - Sorts the collected values in descending order.\n   - Returns the K-th largest value from the sorted list. Call 'find_kth_largest(V_i, K_i)' for each query and store the results. Print the results for all queries, each on a new line. Ensure that the implementation handles the constraints efficiently, particularly for large values of N and Q.