Define a function 'f(S: str) -> str' that implements the transformation of string S into string T according to the specified rules. In the function 'f(S)', initialize an empty string T and iterate over the indices of S from 0 to |S| - 2. For each index i, convert the character S[i+1] to an integer n and append S[i] repeated n times to T. Create a main function 'count_operations(S: str) -> int' that initializes a counter for the number of operations performed. In 'count_operations(S)', repeatedly call 'f(S)' and update S with the result until the length of S becomes 1 or until a cycle is detected. Implement a mechanism to detect cycles in the transformation process to handle the case where the operation could repeat indefinitely. If a cycle is detected, return -1 from 'count_operations(S)'. If the length of S becomes 1, return the counter value modulo 998244353. Ensure that the input string S is validated to contain only digits from '1' to '9' and has a length between 2 and 10^6. Define the output format as an integer representing the number of operations or -1 if the operation is infinite.