Define the function 'canReach(N: int, M: int) -> List[Tuple[int, int, int]]' to handle the input parameters N and M, where N is the size of the grid and M is the distance squared. Initialize a result list to store the output for each square (i, j) indicating if it can be reached and the minimum number of operations required. Use a queue to implement a breadth-first search (BFS) starting from the initial position (1, 1) to explore reachable squares. Calculate the possible moves from the current position (i, j) using the distance 'sqrt(M)' and determine the new positions (k, l) that can be reached. Check if the new position (k, l) is within the bounds of the grid (1 ≤ k, l ≤ N). If (k, l) is valid and has not been visited, mark it as visited and add it to the queue with the incremented operation count. Continue the BFS until all reachable squares have been processed, updating the result list with the minimum operations for each square. After BFS completion, iterate through all squares (i, j) in the grid to finalize the results in the output format. Return the result list containing tuples of (i, j, reachable, min_operations) for each square, where reachable is a boolean indicating if the square can be reached. Ensure the output format is consistent with the requirements, displaying the results for each square in the specified format.