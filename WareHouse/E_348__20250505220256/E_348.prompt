Read the integer N from standard input, which represents the number of vertices in the tree. Initialize an adjacency list 'tree' to represent the tree structure. For each edge from 1 to N-1, read the pairs (A_i, B_i) and populate the 'tree' adjacency list. Read the sequence of positive integers C of length N from standard input. Define a function 'calculate_distance_sum(v)' that computes the value of f(v) using the formula: \n   - For each vertex i in the tree, calculate the distance d(v, i) and sum the products C[i] * d(v, i). Implement a depth-first search (DFS) or breadth-first search (BFS) to compute the distances from vertex v to all other vertices efficiently. Iterate through all vertices from 1 to N, calling 'calculate_distance_sum(v)' for each vertex to find the minimum value of f(v). Keep track of the minimum value found and the corresponding vertex. Print the minimum value of f(v) found across all vertices. Ensure that the solution handles the constraints efficiently, particularly for large values of N (up to 100,000).