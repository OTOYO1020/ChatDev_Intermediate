'''
Module to calculate the number of unique strings generated by adjacent swaps.
'''
from math import factorial
from collections import Counter
class UniqueStringCounter:
    '''
    Class to handle the logic for counting unique strings.
    '''
    def __init__(self, input_string, max_swaps):
        '''
        Initialize the counter with the input string and maximum swaps.
        '''
        self.input_string = input_string
        self.max_swaps = max_swaps
        self.unique_strings = set()
    def calculate_unique_strings(self):
        '''
        Calculate the number of unique strings based on the input string and swaps.
        '''
        n = len(self.input_string)
        if self.max_swaps >= n:
            # If K >= n, calculate the number of unique permutations
            char_count = Counter(self.input_string)
            denominator = 1
            for count in char_count.values():
                denominator *= factorial(count)
            return factorial(n) // denominator
        else:
            # Perform adjacent swaps
            self.swap_and_count(self.input_string, self.max_swaps)
            return len(self.unique_strings)
    def swap_and_count(self, current_string, remaining_swaps):
        '''
        Recursively generate unique strings by performing adjacent swaps.
        '''
        # Add the current string to the set of unique strings
        self.unique_strings.add(current_string)
        if remaining_swaps > 0:
            for i in range(len(current_string) - 1):
                # Swap adjacent characters
                swapped_string = list(current_string)
                swapped_string[i], swapped_string[i + 1] = swapped_string[i + 1], swapped_string[i]
                swapped_string = ''.join(swapped_string)
                # Call recursively for all swapped strings
                self.swap_and_count(swapped_string, remaining_swaps - 1)