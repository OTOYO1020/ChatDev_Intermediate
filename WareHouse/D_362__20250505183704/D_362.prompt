Read integers N and M from standard input, representing the number of vertices and edges, respectively. Initialize an array 'A' of size N to store the weights of the vertices. Read the weights of the vertices into the array 'A' from standard input. Initialize a list of edges 'edges' to store tuples of the form (U_j, V_j, B_j) for each edge. For each edge from 1 to M, read the vertices U_j and V_j and the edge weight B_j, and store them in the 'edges' list. Construct a graph representation using an adjacency list or similar structure to represent the connections and weights between vertices. Implement a function 'dijkstra(start, N, graph, A)' to find the minimum weight path from vertex 1 to all other vertices:\n   - Use a priority queue to explore the graph.\n   - Update the minimum path weights based on the vertex and edge weights. Call 'dijkstra(1, N, graph, A)' to compute the minimum weights from vertex 1 to all other vertices. For each vertex i from 2 to N, retrieve and store the minimum path weight from vertex 1 to vertex i. Print the minimum path weights for vertices 2 through N, each on a new line.