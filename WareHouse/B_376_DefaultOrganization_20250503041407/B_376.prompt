Read integers N and Q from standard input, followed by Q pairs of (H_i, T_i) instructions. Initialize variables 'left_hand' to 1 and 'right_hand' to 2 to represent the initial positions of the hands. Create a variable 'total_operations' and set it to 0 to keep track of the total number of operations performed. For each instruction (H_i, T_i) from 1 to Q:\n   - If H_i is 'L':\n     - Calculate the number of operations needed to move the left hand from 'left_hand' to T_i, ensuring the right hand remains on its current position.\n     - Update 'total_operations' with the calculated number of operations.\n     - Update 'left_hand' to T_i.\n   - If H_i is 'R':\n     - Calculate the number of operations needed to move the right hand from 'right_hand' to T_i, ensuring the left hand remains on its current position.\n     - Update 'total_operations' with the calculated number of operations.\n     - Update 'right_hand' to T_i. Implement a helper function 'calculate_operations(current_position, target_position)' that computes the minimum number of operations required to move from 'current_position' to 'target_position' on the ring. Ensure the calculation in 'calculate_operations' accounts for the circular nature of the ring (i.e., moving from N back to 1). After processing all instructions, print the value of 'total_operations' as the final output. Ensure that the program handles the input and output in the specified format.