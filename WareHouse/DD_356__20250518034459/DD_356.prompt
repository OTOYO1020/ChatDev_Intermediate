Define a function named 'compute_popcount_sum(N: int, M: int) -> int' that takes two integers N and M as input. Implement a loop that iterates from k = 0 to N, inclusive. Within the loop, compute the bitwise AND of k and M using the expression 'k & M'. Define a helper function 'popcount(x: int) -> int' that calculates the number of 1s in the binary representation of x. Call the 'popcount' function with the result of 'k & M' to get the number of 1s. Accumulate the results of the popcount calculations in a variable, say 'total_sum'. Ensure that 'total_sum' is computed modulo 998244353 at each step to prevent overflow. Return the final value of 'total_sum' after the loop completes. Handle input reading to get values for N and M, ensuring they are within the specified constraints. Print the output of the 'compute_popcount_sum' function.