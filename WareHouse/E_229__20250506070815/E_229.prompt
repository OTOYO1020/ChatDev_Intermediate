Read integers N and M from standard input, followed by M pairs of integers (A_i, B_i) representing the edges of the graph. Construct an undirected graph using an adjacency list or similar data structure to represent the connections between vertices. Initialize a list 'components_count' to store the number of connected components after each vertex deletion. Create a function 'delete_vertex(vertex)' that removes the specified vertex and its incident edges from the graph. Implement a function 'count_connected_components()' that uses Depth-First Search (DFS) or Breadth-First Search (BFS) to count the number of connected components in the current state of the graph. Loop through each vertex from 1 to N:\n   - Call 'delete_vertex(i)' to remove vertex i and its edges.\n   - Call 'count_connected_components()' to determine the number of connected components after the deletion.\n   - Store the result in 'components_count[i-1]'. After processing all vertices, prepare to output the results. Print the values in 'components_count', each representing the number of connected components after deleting vertices 1 through N.\n\nOutput format:\n- The output should be a single line containing N integers, each representing the number of connected components after the deletion of vertices from 1 to N.