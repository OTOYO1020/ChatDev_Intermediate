Read integers R and C from standard input, representing the number of rows and columns of the board. Initialize a 2D list 'board' to store the characters representing the current states of each square on the board. Populate the 'board' with R lines of input, each containing C characters (either '.', '#', or '1' to '9'). Create a 2D list 'result' initialized with the same dimensions as 'board', filled with '.' to represent the final state of the board after explosions. Iterate through each cell '(i, j)' in 'board':\n   - If 'board[i][j]' is a bomb (i.e., a character from '1' to '9'), retrieve its power 'p' (the integer value of the character).\n   - For each square '(x, y)' in the board, calculate the Manhattan distance from '(i, j)' to '(x, y)'.\n   - If the Manhattan distance is less than or equal to 'p', set 'result[x][y]' to '.' (indicating it becomes empty). Ensure that walls ('#') remain unchanged in the 'result' board. Print the final state of the 'result' board, row by row.\n\nThis approach ensures that we accurately simulate the simultaneous explosions of all bombs on the board while respecting the constraints of walls and the board's dimensions.