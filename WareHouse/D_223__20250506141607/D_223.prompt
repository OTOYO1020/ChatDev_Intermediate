Read integers N and M from standard input. Initialize an empty list 'constraints' to store pairs of (A_i, B_i). For each of the M constraints, read the pairs (A_i, B_i) and append them to 'constraints'. Create a directed graph representation where each A_i points to B_i based on the constraints. Perform a topological sort on the graph to determine if a valid permutation exists. If a cycle is detected in the graph, print '-1' and terminate. If a valid topological order is found, initialize an empty list 'result' to store the lexicographically smallest sequence. Fill the 'result' list with numbers from 1 to N, ensuring that the order of elements respects the constraints. Print the resulting permutation as a space-separated string. Ensure that the output is formatted correctly, handling edge cases where no valid permutation exists.