Define a function 'majority_value(group)' that takes a group of three binary digits and returns the majority value (0 or 1). Define a function 'apply_operation(B)' that takes a binary string B of length 3^n and applies the majority operation to produce a new binary string C of length 3^(n-1). Implement a function 'reduce_string(A, N)' that applies the 'apply_operation' function N times to the input binary string A, returning the final single character A'1. Create a function 'count_changes(A, target)' that counts the minimum number of changes required in string A to change A'1 to a specified target value (0 or 1). Implement input handling to read the binary string A and the integer N from standard input. Ensure that the input string A is validated to be of length 3^N and consists only of binary digits (0 and 1). Call the 'reduce_string' function with the input string A and N to compute A'1. Determine the target value for A'1 (0 or 1) based on the current value of A'1. Use the 'count_changes' function to calculate the minimum number of changes needed to achieve the target value. Output the result, which is the minimum number of changes required, to standard output.