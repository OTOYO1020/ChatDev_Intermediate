Define the function 'earliest_arrival_time(N: int, M: int, X: int, Y: int, railroads: List[Tuple[int, int, int, int]]) -> Union[int, str]' to handle the input parameters. Parse the input to extract the number of cities 'N', number of railroads 'M', starting city 'X', destination city 'Y', and the list of railroads which includes each railroad's cities 'A_i', 'B_i', departure interval 'K_i', and travel time 'T_i'. Construct a graph representation of the cities and railroads using an adjacency list to store connections and their respective departure intervals and travel times. Implement a priority queue (min-heap) to facilitate the exploration of the earliest reachable times from city 'X' to all other cities. Initialize the earliest reachable time for city 'X' to '0' and for all other cities to infinity. Use Dijkstra's algorithm-like approach to explore the graph, updating the earliest reachable times based on the train schedules and travel times. For each city reached, calculate the next available departure time based on the current time and the departure interval 'K_i'. If city 'Y' is reached, store the earliest time it can be reached; if not reachable after exploring all possibilities, prepare to return an unreachable message. Return the earliest time to reach city 'Y' if reachable, otherwise return 'unreachable'. Ensure the output format is either an integer representing the earliest time or a string 'unreachable'.