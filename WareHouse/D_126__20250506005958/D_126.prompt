Read the integer N from standard input, which represents the number of vertices in the tree. Initialize an adjacency list 'tree' to store the edges of the tree. For each edge from 1 to N-1, read the vertices 'u_i', 'v_i', and the weight 'w_i', and populate the 'tree' adjacency list. Implement a function 'color_tree(vertex, color)' to perform a depth-first search (DFS) or breadth-first search (BFS) to color the tree:\n   - If the current vertex is uncolored, color it with the given 'color'.\n   - Recursively call 'color_tree' for all adjacent vertices with the opposite color. Start the coloring process by calling 'color_tree(1, 0)' to color the first vertex with color 0 (white). Store the colors of all vertices in an array 'colors' where 0 represents white and 1 represents black. After coloring is complete, ensure that all vertices are colored correctly according to the distance condition. Print the colors of the vertices in order from 1 to N. Ensure that the output format is a single line of space-separated integers representing the colors of the vertices.