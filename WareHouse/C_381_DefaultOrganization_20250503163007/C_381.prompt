Read the input string \( S \) from standard input and determine its length \( N \). Initialize a variable \( \text{max\_length} = 0 \) to keep track of the maximum length of valid 11/22 substrings found. Iterate through each character in the string \( S \) to find potential centers of 11/22 substrings (i.e., positions of '/'). For each position \( i \) where \( S[i] = '/' \):\n   - Initialize two pointers: \( \text{left} = i - 1 \) and \( \text{right} = i + 1 \).\n   - Expand the pointers outward while checking the conditions for a valid 11/22 string:\n     - Ensure all characters to the left of '/' are '1' and all characters to the right are '2'. For each valid substring found, calculate its length as \( \text{length} = (\text{right} - \text{left} + 1) \) and update \( \text{max\_length} \) if this length is greater. Continue expanding until the boundaries of the string \( S \) are reached or the conditions for a valid substring are violated. After checking all possible centers, the maximum length of valid 11/22 substrings will be stored in \( \text{max\_length} \). Print the value of \( \text{max\_length} \) as the output.\n\nOutput format:\n- The output will be a single integer representing the maximum length of a contiguous substring of \( S \) that is an 11/22 string.