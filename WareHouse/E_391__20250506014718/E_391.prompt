Read the integer N from standard input, ensuring that it falls within the range \(1 \leq N \leq 13\). Read the binary string A of length \(3^N\) from standard input, confirming that it consists only of characters '0' and '1'. Initialize a variable 'current_string' to hold the value of A. Implement a function 'majority_operation(B)' that takes a binary string B and performs the majority operation to produce a new binary string C of length \(3^{n-1}\):\n   - Partition B into groups of 3.\n   - For each group, determine the majority value and construct C. Apply the 'majority_operation' function N times to 'current_string' to obtain the final single-character string \(A'\_1\). Determine the current value of \(A'\_1\) (either '0' or '1'). Count the number of changes required in the original string A to flip the value of \(A'\_1\) to the opposite value:\n   - If \(A'\_1\) is '0', count how many '0's need to be changed to '1's to ensure the majority changes.\n   - If \(A'\_1\) is '1', count how many '1's need to be changed to '0's. Implement a function 'calculate_min_changes(A, target)' that computes the minimum number of changes needed in A to achieve the desired target value for \(A'\_1\). Call 'calculate_min_changes(A, target)' where target is the opposite of the current value of \(A'\_1\). Print the minimum number of changes required to change the value of \(A'\_1\).