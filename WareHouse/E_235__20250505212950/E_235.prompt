Read integers N and M from standard input, representing the number of vertices and edges in the graph. Initialize a list of edges 'edges' to store tuples of (a_i, b_i, c_i) for each edge, where a_i and b_i are the vertices connected by edge i, and c_i is the weight of edge i. For each edge from 1 to M, read the integers a_i, b_i, and c_i and append them to the 'edges' list. Read the integer Q from standard input, representing the number of queries. Initialize a list of queries 'queries' to store tuples of (u_i, v_i, w_i) for each query. For each query from 1 to Q, read the integers u_i, v_i, and w_i and append them to the 'queries' list. Implement a function 'find_mst(edges)' that computes the minimum spanning tree (MST) of the graph G using Kruskal's or Prim's algorithm. For each query (u_i, v_i, w_i) in 'queries', create a new edge 'e_i' and check if it is included in the MST of the graph G_i obtained by adding 'e_i' to G. Print Yes if 'e_i' is in the MST, otherwise print No. Ensure that the output is formatted correctly, with each answer on a new line.