Both input and output are assumed to be performed via standard input and standard output, so don't create any GUI. Also, be mindful of not creating unnecessary variables and functions. Input Handling:Read integers N and Q, representing the number of pigeons and nests, followed by Q queries. The pigeons are named pigeon 1, pigeon 2, etc., and when 1 P H is input, pigeon P should be moved to nest H. Note that initially pigeon 1 and pigeon 2 are in nest 1 and nest 2. Every nest has one pigeon. Each query is either of type '1 P H', which moves pigeon P to nest H, or type '2', which requests the count of nests containing multiple pigeons. Data Structure Initialization:Maintain a data structure to efficiently track the number of pigeons in each nest. Ensure that updates and queries can be performed efficiently given the constraints. Processing Move Queries ('1 P H'):When a '1 P H' query is encountered, update the data structure by moving pigeon P from its current nest to nest H. Ensure that the number of pigeons in the affected nests is correctly updated.Processing Count Queries ('2'):For a '2' query, compute the number of nests containing more than one pigeon and output the result efficiently, avoiding a full scan of all nests. Output Results:Store the results of all '2' queries and output them sequentially to minimize I/O operations, ensuring efficient performance.