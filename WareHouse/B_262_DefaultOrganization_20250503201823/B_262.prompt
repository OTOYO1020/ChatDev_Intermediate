Read integers N and M from standard input, followed by M pairs of integers (U_i, V_i) representing the edges of the graph. Initialize an adjacency list 'graph' to represent the undirected graph, where 'graph[i]' contains a list of vertices connected to vertex i. Populate the adjacency list 'graph' using the pairs (U_i, V_i) to ensure both directions are represented (i.e., add V_i to graph[U_i] and U_i to graph[V_i]). Initialize a counter 'count' to zero to keep track of valid tuples (a, b, c). Iterate through all combinations of vertices (a, b, c) such that 1 ≤ a < b < c ≤ N. For each combination (a, b, c), check if the edges (a, b), (b, c), and (c, a) exist in the adjacency list 'graph'. If all three edges exist, increment the 'count' by 1. After checking all combinations, print the final value of 'count' as the output.