Read integers H and W from standard input, representing the number of rows and columns in the grid. Read the starting position (S_i, S_j) from standard input, ensuring that S_i and S_j are within the valid range. Read the grid configuration C, which is a list of strings of length W for each of the H rows. Read the string X from standard input, which contains the sequence of movements (L, R, U, D). Initialize the current position as (current_i, current_j) = (S_i - 1, S_j - 1) to account for zero-based indexing. Loop through each character in the string X:\n   - If the character is 'L', check if (current_j - 1) is valid and if C[current_i][current_j - 1] is empty ('.'). If both conditions are met, update current_j.\n   - If the character is 'R', check if (current_j + 1) is valid and if C[current_i][current_j + 1] is empty ('.'). If both conditions are met, update current_j.\n   - If the character is 'U', check if (current_i - 1) is valid and if C[current_i - 1][current_j] is empty ('.'). If both conditions are met, update current_i.\n   - If the character is 'D', check if (current_i + 1) is valid and if C[current_i + 1][current_j] is empty ('.'). If both conditions are met, update current_i. After processing all movements in X, the final position will be (current_i + 1, current_j + 1) to convert back to one-based indexing. Print the final position as a pair of integers (current_i + 1, current_j + 1).