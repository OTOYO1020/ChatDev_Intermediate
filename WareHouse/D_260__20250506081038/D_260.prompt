Read the integer values N and K from standard input. Read the permutation array P of length N, which represents the integers on the cards. Initialize an empty list 'table' to represent the face-up cards on the table. Create a list 'eaten_moves' of length N initialized to -1 to track the move in which each card is eaten. Loop through each move from 0 to N-1:\n   - a. Draw the topmost card, which corresponds to P[move].\n   - b. Set X to P[move].\n   - c. Find the position in 'table' where X can be stacked:\n     - i. If there are no cards in 'table' with an integer greater than or equal to X, add X to 'table'.\n     - ii. If such cards exist, find the card with the smallest integer greater than or equal to X and stack X on top of it.\n   - d. Check if the length of 'table' is equal to K:\n     - i. If true, mark the last K cards in 'eaten_moves' with the current move index.\n     - ii. Remove the last K cards from 'table'. After processing all moves, check 'eaten_moves' for each card:\n   - a. If a card was never eaten, mark its corresponding index in 'eaten_moves' with -1. Print the results from 'eaten_moves', indicating the move in which each card was eaten or that it was never eaten.\n\nThis structured approach breaks down the problem into manageable subtasks while clearly defining the input and output formats.