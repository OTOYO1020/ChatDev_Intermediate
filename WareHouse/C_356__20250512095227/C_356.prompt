Define the function 'count_valid_key_combinations(N: int, M: int, K: int, tests: List[Tuple[List[int], str]]) -> int' to handle the input parameters. Parse the input to extract integers N, M, K, and the list of tests which includes the number of keys inserted and the result for each test. Generate all possible combinations of keys being real or dummy using bit manipulation, since N is at most 15. For each combination, check if it satisfies the conditions of the tests: if the result is 'o', ensure at least K real keys are present; if 'x', ensure fewer than K real keys are present. Count the number of valid combinations that do not contradict any of the test results. Implement a helper function to evaluate a single combination against the test results. Ensure that the function handles edge cases where no valid combinations exist, returning 0 in such cases. Optimize the checking process to avoid unnecessary computations for combinations that are already known to be invalid. Test the function with various inputs to ensure correctness, including edge cases and maximum constraints. Return the final count of valid combinations as the output of the function.