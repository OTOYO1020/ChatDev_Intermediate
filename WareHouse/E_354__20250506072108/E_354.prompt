Read the integer N from standard input, representing the number of cards. Initialize two lists, 'A' and 'B', to store the front and back values of the cards, respectively. Read N pairs of integers (A_i, B_i) and populate the lists 'A' and 'B'. Create a function 'can_remove_pair(A, B)' that checks if there exists a pair of cards that can be removed based on the game rules. Implement a recursive function 'play_game(A, B, turn)' to simulate the game:\n   - If 'turn' is 0, it indicates Takahashi's turn; if 1, it indicates Aoki's turn.\n   - Call 'can_remove_pair(A, B)' to check for possible moves.\n   - If no moves are available, return the winner based on the current turn.\n   - If moves are available, iterate through the possible pairs of cards, remove them, and recursively call 'play_game' for the next turn. In the main function, call 'play_game(A, B, 0)' to start the game with Takahashi's turn. Capture the result of the game and determine the winner based on the returned value. Print the winner's name: Takahashi if Takahashi wins, otherwise Aoki. Ensure that the game logic handles the constraints of N (1 ≤ N ≤ 18) efficiently. Output the result in the specified format.