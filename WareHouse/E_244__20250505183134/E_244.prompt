Read integers N, M, K, S, T, and X from standard input. Initialize an adjacency list 'graph' to represent the undirected graph with N vertices and M edges. For each edge, read the vertices U_i and V_i, and populate the adjacency list 'graph' such that 'graph[U_i].append(V_i)' and 'graph[V_i].append(U_i)'. Define a function 'count_sequences(current_vertex, remaining_steps, even_count)' to recursively count valid sequences A. In 'count_sequences', check if 'remaining_steps' is 0:\n   - If 'current_vertex' equals T and 'even_count' is even, return 1 (valid sequence).\n   - If 'current_vertex' is not T, return 0 (invalid sequence). Loop through each neighbor of 'current_vertex' in 'graph':\n   - If the neighbor is X, call 'count_sequences(neighbor, remaining_steps - 1, even_count + 1)'.\n   - Otherwise, call 'count_sequences(neighbor, remaining_steps - 1, even_count)'. Use memoization to store results of 'count_sequences' to avoid redundant calculations. Call 'count_sequences(S, K, 0)' to initiate the counting from the starting vertex S with K steps remaining and an initial even count of 0. Compute the result modulo 998244353. Print the final count of valid sequences.