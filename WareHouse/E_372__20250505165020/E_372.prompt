Read integers N and Q from standard input, representing the number of vertices and the number of queries. Initialize an adjacency list 'graph' to store the connections between vertices. Loop through the Q queries:\n   - For each query, read the type and associated parameters.\n   - If the query type is '1 u v', call 'add_edge(graph, u, v)' to add an edge between vertices u and v.\n   - If the query type is '2 v k', call 'find_kth_largest(graph, v, k)' to find the k-th largest vertex connected to vertex v. In 'add_edge(graph, u, v)', update the adjacency list to reflect the new edge. In 'find_kth_largest(graph, v, k)', retrieve the list of vertices connected to v, sort them in descending order, and check if there are at least k vertices.\n   - If there are at least k vertices, return the k-th largest; otherwise, return -1. Print the results for all Type 2 queries. Ensure that the graph is undirected by adding edges in both directions (u to v and v to u). Handle input validation to ensure that u and v are within the valid range (1 to N). Optimize the adjacency list to allow for efficient retrieval and sorting of connected vertices. Output the results of Type 2 queries in the order they were received.