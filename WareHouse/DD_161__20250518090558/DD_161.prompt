Define a function 'is_lunlun_number(num: int) -> bool' that checks if a given integer 'num' is a lunlun number by evaluating the absolute difference between each pair of adjacent digits. Implement a function 'generate_lunlun_numbers(limit: int) -> List[int]' that generates lunlun numbers up to a specified limit using a breadth-first search approach starting from single-digit numbers. Create a function 'find_kth_lunlun_number(K: int) -> int' that utilizes 'generate_lunlun_numbers' to find the K-th smallest lunlun number. Handle input by defining a function 'main()' that reads an integer 'K' from standard input. Ensure that the input value 'K' is within the constraint of 1 ≤ K ≤ 100000. Call 'find_kth_lunlun_number(K)' within 'main()' to get the K-th lunlun number. Store the generated lunlun numbers in a list and sort them if necessary to ensure the correct order. Return the K-th element from the list of lunlun numbers in 'find_kth_lunlun_number'. Print the result of the K-th lunlun number in the 'main()' function. Test the implementation with various values of K to ensure correctness and performance within the given constraints.