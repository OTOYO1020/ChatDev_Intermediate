Read integers N and M from standard input, representing the number of vertices and edges in the graph. Initialize an adjacency list 'graph' to represent the undirected graph. For each edge, read the vertices U_i and V_i, and update the 'graph' to include both directions (U_i to V_i and V_i to U_i). Read the array A of size N, which contains the integers written on each vertex. Implement a function 'dfs(vertex, visited, path)' to perform a depth-first search from vertex 1 to vertex N, tracking visited vertices and the current path. In 'dfs', check if the current path is non-decreasing:\n   - If not, return a score of 0.\n   - If it is, calculate the number of distinct integers in the path and return that score. Maintain a variable 'max_score' to keep track of the highest score found during the DFS. Call 'dfs(1, visited_set, [])' to start the search from vertex 1. After all paths have been explored, print the 'max_score' as the result. Ensure that the function handles the constraints of the problem, including the maximum limits for N and M.