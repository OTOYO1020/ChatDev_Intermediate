Read integers N and M from standard input, representing the number of switches and bulbs, respectively. Initialize a list 'bulb_conditions' to store the conditions for each bulb. For each bulb i from 1 to M:\n   - Read integer k_i, the number of switches connected to bulb i.\n   - Read the next k_i integers (s_{i1}, s_{i2}, ..., s_{ik_i}), which represent the switch numbers connected to bulb i.\n   - Read the integer p_i, which indicates the required parity (0 or 1) for the bulb to be lit.\n   - Store the tuple (s_{i1}, s_{i2}, ..., s_{ik_i}, p_i) in 'bulb_conditions'. Define a function 'count_valid_combinations(N, bulb_conditions)' to calculate the number of valid combinations of switch states. In 'count_valid_combinations', iterate through all possible combinations of switch states (2^N combinations). For each combination, check if all bulbs are lit according to their conditions in 'bulb_conditions':\n   - For each bulb, count the number of on switches and check if it matches the required parity p_i. Maintain a counter for valid combinations that light all bulbs. Return the count of valid combinations from 'count_valid_combinations'. Print the result, which is the total number of valid combinations of switch states that light all bulbs.