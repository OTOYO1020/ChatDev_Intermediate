Read integers N and M from standard input to determine the number of vertices and edges in the graph. Initialize an adjacency list 'graph' to represent the undirected graph. For each edge (i from 1 to M):\n   - Read the vertices 'a_i' and 'b_i'.\n   - Update the adjacency list 'graph[a_i].append(b_i)' and 'graph[b_i].append(a_i)' to reflect the connection between the vertices. Read integer Q from standard input to determine the number of queries. For each query (i from 1 to Q):\n   - Read the vertex 'x_i' and the distance 'k_i'.\n   - Call a function 'sum_of_indices_within_distance(graph, x_i, k_i)' to compute the sum of indices of vertices within distance 'k_i' from 'x_i'. In 'sum_of_indices_within_distance(graph, x_i, k_i)':\n   - Initialize a queue for BFS and a set for visited vertices.\n   - Perform BFS starting from 'x_i' up to a depth of 'k_i', accumulating the indices of visited vertices. Return the accumulated sum of indices from 'sum_of_indices_within_distance'. Print the results for each query after processing all queries. Ensure that the graph adheres to the constraints of having a maximum degree of 3 for each vertex. Handle edge cases where there are no edges (M = 0) and ensure the output format is correct.