Define the function 'min_operations_to_contiguous_ones(S: str) -> int' to encapsulate the solution logic. Parse the input string 'S' and determine its length 'N'. Identify the positions of all '1's in the string 'S' and store them in a list 'positions'. Calculate the target positions for the '1's to be contiguous, which will be the range from 'positions[0]' to 'positions[-1]'. Compute the number of swaps needed to move each '1' in 'positions' to its target position. Sum the total number of swaps required and store it in a variable 'total_swaps'. Return the value of 'total_swaps' as the output of the function. Ensure that the function handles edge cases, such as when 'S' contains only one '1'. Implement input handling to read the string 'S' from standard input. Output the result of the function call in the format of an integer representing the minimum number of operations.