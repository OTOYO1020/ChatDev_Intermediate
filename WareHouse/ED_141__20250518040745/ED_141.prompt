Define the function 'max_length_repeated_substring(S: str) -> int' to encapsulate the logic for finding the maximum length of a non-empty string that occurs twice or more in S. Implement input handling to read the string S and its length N from standard input. Initialize a variable 'max_len' to store the maximum length found, starting with 0. Use a nested loop to iterate over all possible lengths 'len' from 1 to N-1. For each length 'len', use another nested loop to check all starting positions 'l1' and 'l2' in S for the substrings of length 'len'. Ensure that the condition 'l1 + len <= l2' is satisfied to avoid overlapping substrings. Compare the substrings 'S[l1:l1+len]' and 'S[l2:l2+len]' to check if they are equal. If a match is found, update 'max_len' to the current length 'len' if it is greater than the current 'max_len'. After all iterations, return the value of 'max_len'. Print the output as an integer, which is the maximum length of the repeated substring found.