Define a function 'max_projects(N: int, K: int, A: List[int]) -> int' to calculate the maximum number of projects. Parse the input to extract the values of N, K, and the list A of employee counts for each department. Ensure that the input constraints are satisfied: 1 ≤ K ≤ N ≤ 200000 and 1 ≤ A_i ≤ 10^12. Sort the list A in descending order to prioritize departments with the most employees. Initialize a variable 'total_projects' to zero to keep track of the maximum number of projects. Iterate through the sorted list A, selecting groups of K distinct departments to form projects. For each selected group of K departments, determine the minimum number of employees available among them to form a project. Update 'total_projects' by adding the number of projects that can be formed from the selected departments. Continue the process until all possible combinations of K departments have been evaluated. Return the value of 'total_projects' as the output of the function.