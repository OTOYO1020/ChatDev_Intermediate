Define a function 'digit_sum(n: int) -> int' that calculates the digit sum of a positive integer 'n'. Define a function 'is_good_integer(n: int) -> bool' that checks if a positive integer 'n' is divisible by its digit sum. Implement a function 'find_twin_good_integers(N: int) -> Tuple[int, int]' that finds a pair of twin good integers '(a, a + 1)' such that 'N <= a <= 2N'. Within 'find_twin_good_integers', iterate over integers starting from 'N' up to '2N'. For each integer 'a' in the iteration, use 'is_good_integer(a)' to check if 'a' is a good integer. If 'a' is a good integer, check if 'is_good_integer(a + 1)' to determine if '(a, a + 1)' are twin good integers. If a pair of twin good integers is found, return the pair '(a, a + 1)'. If no twin good integers are found after the iteration, return a message indicating no such pair exists. Handle input format to read a single integer 'N' from standard input. Output the result in the format of either the twin good integers or a message indicating no pair exists.