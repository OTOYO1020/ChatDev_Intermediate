Read the integer N from standard input, which represents the number of right half-open intervals. Initialize a list 'intervals' to store the pairs of (L_i, R_i). For i from 1 to N, read each pair of integers (L_i, R_i) and append them to the 'intervals' list. Sort the 'intervals' list based on the starting point L_i. If L_i values are the same, sort by R_i in ascending order. Initialize an empty list 'merged_intervals' to store the resulting union of intervals. Iterate through the sorted 'intervals':\n   - If 'merged_intervals' is empty or the current interval's L_i is greater than or equal to the last interval's R_i in 'merged_intervals', append the current interval to 'merged_intervals'.\n   - Otherwise, update the last interval in 'merged_intervals' to merge with the current interval by setting its R value to the maximum of the last interval's R and the current interval's R. Prepare the output format by converting each interval in 'merged_intervals' to a string representation. Print the number of merged intervals followed by each interval in the format '[L, R)'.\n\nThis breakdown ensures that the problem is solved efficiently while adhering to the constraints provided.