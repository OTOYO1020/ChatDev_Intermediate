Define a function 'minimum_toll(K: int, S_x: int, S_y: int, T_x: int, T_y: int) -> int' to calculate the minimum toll. Implement a method to determine the type of tile at given coordinates using the formula 'floor(i/K) + floor(j/K)'. If the result is even, it is a small tile; otherwise, it is a large tile. Create a function 'get_tile_type(i: int, j: int) -> str' that returns 'small' or 'large' based on the tile type at coordinates (i, j). Implement a way to track the current position of Takahashi and the number of tolls paid as he moves from the starting point to the target point. Develop a method to calculate the number of toll crossings based on the path taken from the starting point to the target point. Ensure that the movement logic allows Takahashi to move in any direction (up, down, left, right) and that it correctly updates his position. Handle edge cases where the starting and target points are the same, ensuring that the toll is zero in such scenarios. Implement a loop or recursive function to simulate Takahashi's movement until he reaches the target point, counting tolls as he crosses tile boundaries. Integrate all components to ensure that the function 'minimum_toll' correctly returns the total toll paid upon reaching the target point. Format the output of the function to return an integer representing the minimum toll Takahashi must pay.