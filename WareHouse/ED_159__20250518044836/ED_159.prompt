Define the function 'min_cuts(H: int, W: int, K: int, S: List[List[int]]) -> int' to encapsulate the logic for calculating the minimum cuts needed. Parse the input to extract the values of H, W, K, and the 2D list S representing the chocolate bar, ensuring that S is populated with integers (0s and 1s). Implement a method to calculate the number of white squares in each block formed by potential cuts, ensuring that the count does not exceed K. Create a loop to iterate through all possible cut positions (both horizontal and vertical) to determine where cuts can be made. For each possible cut configuration, check if the resulting blocks have K or fewer white squares, and count the necessary cuts. Maintain a variable to track the minimum number of cuts required across all configurations evaluated. Implement edge case handling for scenarios where no cuts are needed (e.g., when all blocks already satisfy the condition). Ensure that the function returns the minimum number of cuts as an integer. Test the function with various input scenarios to validate correctness and performance within the given constraints. Format the output as an integer representing the minimum number of cuts required.