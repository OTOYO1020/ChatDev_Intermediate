Define the function 'perform_swaps(N: int, Q: int, operations: List[int]) -> List[int]' to handle the input parameters where N is the number of balls, Q is the number of operations, and operations is a list of integers representing the operations to be performed. Initialize a list 'balls' of size N where each element at index i contains the integer i+1 (representing the initial state of the balls). Iterate through each operation in the 'operations' list using a loop indexed by 'i' from 0 to Q-1. For each operation, retrieve the integer 'x_i' from 'operations[i]' and determine its current index in the 'balls' list. If the ball with integer 'x_i' is not the rightmost ball, swap it with the ball to its right; otherwise, swap it with the ball to its left. Implement the swap logic by defining a helper function 'swap(balls: List[int], index1: int, index2: int)', which swaps the elements at the given indices. After processing all operations, the final state of the balls should be stored in the 'balls' list. Return the 'balls' list as the output of the function 'perform_swaps'. Ensure that the input is read in the specified format, where the first line contains N and Q, followed by Q lines each containing an integer x_i. Output the final state of the balls in the format 'a_1 a_2 ... a_N' where each a_i is the integer on the i-th ball after all operations.