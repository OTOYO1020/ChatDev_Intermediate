Define a function 'greatest_multiple_of_D(A: List[int], K: int, D: int) -> int' to encapsulate the solution logic. Implement input handling to read the sequence of integers 'A', the integer 'K', and the integer 'D' from standard input. Validate the input constraints: ensure that 1 <= K <= N <= 100, 1 <= D <= 100, and 0 <= a_i <= 10^9 for all elements in A. Generate all possible sums of K distinct terms from the list A and store these sums in a set S. Iterate through the set S to find all multiples of D and store them in a separate list. Determine the greatest multiple of D from the list of multiples found in the previous step. If no multiples of D are found, prepare to return -1 as the output. Return the greatest multiple of D or -1 if no such multiple exists. Ensure that the function handles edge cases, such as when K equals N or when all elements in A are zero. Implement output handling to print the result of the function call.