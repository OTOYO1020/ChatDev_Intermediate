Define the function 'calculate_results(N: int, M: int, submissions: List[Tuple[int, str]]) -> Tuple[int, int]' to handle the input parameters. Parse the input values for 'N' and 'M', and create a list 'submissions' to store tuples of '(p_i, S_i)' for each submission. Initialize a set 'correct_answers' to keep track of unique problems that received an 'AC' verdict. Initialize a dictionary 'penalties' to count the number of 'WA' submissions before the first 'AC' for each problem. Iterate through the 'submissions' list and for each submission, check if the verdict is 'AC' or 'WA'. If the verdict is 'AC', add the problem index to 'correct_answers' and update the penalties for that problem based on previous 'WA' counts. If the verdict is 'WA', increment the count of 'WA' for that problem in the 'penalties' dictionary if the problem has not yet received an 'AC'. After processing all submissions, calculate the total number of correct answers as the length of 'correct_answers'. Calculate the total penalties by summing the values in the 'penalties' dictionary for the problems that received an 'AC'. Return the results as a tuple containing the number of correct answers and total penalties.