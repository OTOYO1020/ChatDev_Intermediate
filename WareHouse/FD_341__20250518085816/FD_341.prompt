Define the function 'max_operations(N: int, M: int, edges: List[Tuple[int, int]], weights: List[int], pieces: List[int])' to handle the input parameters. Parse the input to extract the number of vertices 'N', number of edges 'M', the list of edges 'edges', the list of weights 'weights', and the list of pieces 'pieces'. Construct an adjacency list representation of the graph using the edges provided. Initialize a counter 'total_operations' to track the maximum number of operations performed. Implement a loop to repeatedly perform the operation of removing a piece and placing pieces on adjacent vertices until no pieces remain. Within the loop, for each vertex 'x' with pieces, check its adjacent vertices and calculate the sum of weights of those vertices. Select a set 'S' of adjacent vertices such that the sum of their weights is less than the weight of vertex 'x'. Place one piece on each vertex in the set 'S' and decrement the piece count for vertex 'x'. Continue the loop until no pieces can be placed on adjacent vertices, updating 'total_operations' accordingly. Return the value of 'total_operations' as the output of the function.