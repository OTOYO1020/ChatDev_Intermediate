Read integers N and M from standard input, representing the dimensions of the grid. Read N strings \( S_1, S_2, \ldots, S_N \) from standard input, each of length M, representing the grid layout. Initialize a set 'visited' to keep track of ice squares the player can touch. Define a function 'can_move(i, j, direction)' that checks if the player can move in the specified direction from square (i, j):\n   - If moving up, check squares (i-1, j) until hitting a rock or the grid boundary.\n   - If moving down, check squares (i+1, j) similarly.\n   - If moving left, check squares (i, j-1).\n   - If moving right, check squares (i, j+1). From the starting position (2, 2), add it to 'visited'. For each direction (up, down, left, right), call 'can_move(2, 2, direction)' and update 'visited' with all reachable ice squares. Repeat the movement process until no new ice squares can be added to 'visited'. Count the number of unique ice squares in 'visited'. Print the count of ice squares the player can touch.\n\nThis structured approach ensures that the problem is broken down into manageable subtasks, allowing for clear implementation steps.