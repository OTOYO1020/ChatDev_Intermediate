Define the function 'countWays(N: int, L: List[int], A: List[List[int]], X: int) -> int' to encapsulate the logic for counting the ways to pick balls from bags. Parse the input to extract the number of bags 'N', the list of counts of balls 'L', the list of lists 'A' containing the integers on the balls, and the target product 'X'. Implement a loop to iterate through each bag and for each bag, iterate through the balls to calculate all possible products of selected balls. Use a recursive or iterative approach to explore combinations of balls from each bag while keeping track of the current product of selected balls. Check if the current product equals 'X' and maintain a count of valid combinations that meet this criterion. Ensure that the implementation handles the constraints, particularly the maximum product limit of '10^5' for the number of combinations. Consider edge cases where the values of 'a_{i,j}' are at their minimum and maximum limits to ensure robustness. Optimize the algorithm to avoid unnecessary calculations, especially when the current product exceeds 'X'. Return the final count of valid combinations from the function 'countWays'. Format the output as an integer representing the number of ways to pick the balls such that their product equals 'X'.