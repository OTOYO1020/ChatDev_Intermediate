Parse the input to read the number of test cases T and for each test case, read the values of N, X, and K. Construct the tree structure based on the given rules, where each vertex i (2 ≤ i ≤ N) connects to vertex ⌊i/2⌋. Implement a function 'find_distance_count(N, X, K)' that calculates the number of vertices at distance K from vertex X. In 'find_distance_count', handle the case where K is 0 by returning 1 if X is within the range of vertices, otherwise return 0. In 'find_distance_count', calculate the parent and child vertices of X to determine the vertices at distance K. Ensure that the calculation of vertices at distance K does not exceed the bounds of the tree (1 to N). Optimize the function to handle the upper limits of N (up to 10^18) efficiently without constructing the entire tree. Iterate through all test cases and call 'find_distance_count' for each set of inputs (N, X, K). Store the results of each test case in a list for output after processing all test cases. Print the results for all test cases in the required output format.