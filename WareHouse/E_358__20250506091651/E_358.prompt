Read the integer K from standard input, which represents the maximum length of the strings. Read the array C of size 26 from standard input, where each C[i] represents the maximum occurrences allowed for the i-th uppercase English letter (A to Z). Initialize a variable 'total_count' to 0 to keep track of the total number of valid strings. Loop through all possible lengths 'length' from 1 to K:\n   - For each length, calculate the number of valid strings that can be formed using the letters A to Z with the given constraints. For each letter 'a_i' (where i ranges from 1 to 26):\n   - Determine the number of occurrences of 'a_i' that can be used in the current string length.\n   - Ensure that the occurrences do not exceed C[i-1] (since C is 0-indexed). Use combinatorial counting to calculate the number of valid distributions of letters for the current string length. Update 'total_count' with the number of valid strings for the current length, ensuring to take modulo 998244353. After processing all lengths, print the 'total_count' as the final result.