Read integers N, W, and Q from standard input, followed by N pairs of integers (X_i, Y_i) representing the initial positions of the blocks, and Q queries (A_j, T_j). Store the initial positions of the blocks in a list of tuples 'blocks = [(X_i, Y_i) for i in range(N)]'. Create a data structure (e.g., a dictionary or list) to track the positions of blocks for efficient access during queries. For each block, determine its final position after simulating the downward movement until the bottom row is filled or the block can no longer move. Implement a function 'final_position(block)' that calculates the final position of a given block based on the movement rules. For each query (A_j, T_j), check if the block A_j exists at time T_j + 0.5 by comparing its final position with T_j. Store the results of each query in a list. Print the results for each query, indicating whether the block exists at the specified time. Ensure that the simulation handles the maximum constraints efficiently, particularly for large values of T_j. Validate the input to ensure all constraints are met before processing.