Receive the non-empty string \( S \) from standard input. Initialize two variables, 'smallest' and 'largest', to store the lexicographically smallest and largest strings, respectively. Set both to the initial value of \( S \). Compute all possible left shifts of \( S \) by iterating from 0 to the length of \( S \) minus 1:\n   - For each index \( i \), create a new string 'left_shifted' by performing a left shift on \( S \).\n   - Compare 'left_shifted' with 'smallest' and 'largest':\n     - If 'left_shifted' is smaller than 'smallest', update 'smallest'.\n     - If 'left_shifted' is larger than 'largest', update 'largest'. Compute all possible right shifts of \( S \) by iterating from 0 to the length of \( S \) minus 1:\n   - For each index \( i \), create a new string 'right_shifted' by performing a right shift on \( S \).\n   - Compare 'right_shifted' with 'smallest' and 'largest':\n     - If 'right_shifted' is smaller than 'smallest', update 'smallest'.\n     - If 'right_shifted' is larger than 'largest', update 'largest'. After processing all shifts, the variables 'smallest' and 'largest' will contain the desired results. Print the values of 'smallest' and 'largest' as the output.