Read the integer N from standard input, which represents the number of vertices in the directed graph. Initialize an array 'A' of size N to store the edges, where 'A[i]' represents the vertex that vertex 'i' points to. Read N integers from standard input and populate the array 'A' such that 'A[i]' corresponds to the edge from vertex 'i' to vertex 'A[i]'. Initialize a set or a list 'visited' to keep track of visited vertices during the cycle detection process. Iterate through each vertex starting from vertex 1 to N:\n   - For each vertex, follow the edges to find a cycle:\n     - Maintain a temporary list 'current_path' to track the current path of vertices being explored.\n     - If a vertex is revisited (i.e., already in 'current_path'), a cycle is detected. Once a cycle is detected, ensure that it meets the conditions of a directed cycle:\n   - Check that the cycle length M is at least 2.\n   - Verify that edges exist between consecutive vertices in the cycle and from the last vertex back to the first. Store the found cycle in a variable 'cycle' and ensure it contains unique vertices. Print the vertices in the cycle as output. Ensure that the solution is efficient and operates within the constraints of O(N) time complexity. Handle any potential edge cases, such as ensuring that the input adheres to the constraints provided (e.g., no self-loops).