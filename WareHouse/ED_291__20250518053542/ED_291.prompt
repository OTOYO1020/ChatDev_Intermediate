Define the function 'can_determine_permutation(N: int, M: int, pairs: List[Tuple[int, int]]) -> Tuple[bool, List[int]]' to handle the input parameters, where 'N' is the length of the sequence, 'M' is the number of pairs, and 'pairs' is a list of tuples containing the pairs '(X_i, Y_i).' Parse the input to extract the values of 'N', 'M', and the list of pairs 'pairs' from the input format. Create a directed graph representation of the constraints using an adjacency list, where each pair '(X_i, Y_i)' indicates a directed edge from 'X_i' to 'Y_i'. Implement a topological sorting algorithm to determine if there is a unique ordering of the elements based on the directed graph created from the pairs. Check if the topological sort results in a valid permutation of the numbers from '1' to 'N' and if it is unique. If a unique permutation is found, construct the permutation 'A' based on the topological sort result. Return a tuple containing a boolean indicating whether the permutation can be uniquely determined and the permutation 'A' if it exists. Handle edge cases where the input constraints are at their limits, ensuring the solution is efficient for the maximum input sizes. Test the function with various test cases to ensure correctness, including cases with no constraints and cases with maximum constraints. Format the output to display whether the permutation can be uniquely determined and the permutation itself if applicable.