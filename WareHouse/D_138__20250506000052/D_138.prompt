Read integers N and Q from standard input. Initialize an array 'counters' of size N with all elements set to 0 to store the counter values for each vertex. Create an adjacency list 'tree' to represent the tree structure using N-1 edges (a_i, b_i). For each edge (a_i, b_i), update the adjacency list to reflect the connections between vertices. For each operation j from 1 to Q, read the values p_j and x_j from standard input. Use Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse the subtree rooted at vertex p_j and increment the counters of all vertices in that subtree by x_j. After processing all operations, prepare to output the final values of the 'counters' array. Print the final values of the counters for each vertex from 1 to N, each on a new line. Ensure that the tree structure is correctly maintained and that all operations are performed efficiently to handle the upper limits of N and Q. Validate that all input values adhere to the specified constraints before processing.