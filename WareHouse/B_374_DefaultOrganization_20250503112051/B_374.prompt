Read the two strings \( S \) and \( T \) from standard input. Determine the lengths of both strings: \( |S| \) and \( |T| \). Compare characters of \( S \) and \( T \) from the first character up to the minimum length of both strings. If a mismatch is found at position \( i \) (where \( S_i \neq T_i \)), print \( i + 1 \) (to convert from 0-based to 1-based index). If no mismatches are found and the lengths are equal, print \( 0 \). If \( |S| < |T| \), print \( |S| + 1 \) (indicating the first differing position is after the end of \( S \)). If \( |T| < |S| \), print \( |T| + 1 \) (indicating the first differing position is after the end of \( T \)). Ensure that the function handles edge cases where one string is a prefix of the other. Implement the logic in a function named 'compare_strings(S, T)'. Print the final result based on the comparisons made.