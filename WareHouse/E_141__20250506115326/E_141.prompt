Read the integer N and the string S from standard input. Initialize a variable 'max_length' to 0 to keep track of the maximum length of the contiguous substring found. Loop through possible lengths 'len' from 1 to N/2 (inclusive) to ensure non-overlapping substrings. For each length 'len', create a set to store seen substrings of length 'len'. Loop through the string S to extract all contiguous substrings of length 'len':\n   - For each starting index 'l1', extract the substring 'substring = S[l1:l1+len]'.\n   - Check if 'substring' is already in the set:\n     - If yes, update 'max_length' to 'len'.\n     - If no, add 'substring' to the set. After checking all possible lengths, if 'max_length' remains 0, set it to 0 to indicate no valid substring was found. Print the value of 'max_length'.\n\nThis approach ensures that we efficiently find the maximum length of a non-empty substring that occurs at least twice without overlapping in the given string S.