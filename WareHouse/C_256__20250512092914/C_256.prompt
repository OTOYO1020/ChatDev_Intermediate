Define a function 'countWays(h1: int, h2: int, h3: int, w1: int, w2: int, w3: int) -> int' to encapsulate the logic for counting valid grid configurations. Parse the input to extract six integers: 'h1', 'h2', 'h3', 'w1', 'w2', and 'w3' from the input format. Implement a validation check to ensure that all integers are within the range [3, 30]. Create a 3x3 grid representation to hold the integers that will be filled based on the constraints. Develop a recursive or iterative algorithm to fill the grid while ensuring that the row sums equal 'h1', 'h2', and 'h3' and the column sums equal 'w1', 'w2', and 'w3'. Count the number of valid configurations that satisfy the row and column sum conditions. Return the count of valid configurations from the function 'countWays'. Handle edge cases where no valid configurations exist and ensure the function returns 0 in such cases. Test the function with various input scenarios to ensure correctness and adherence to constraints. Output the result as an integer representing the number of valid ways to fill the grid.