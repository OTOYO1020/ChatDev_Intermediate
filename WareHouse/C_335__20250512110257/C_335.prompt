Define the function 'process_queries(N: int, Q: int, queries: List[Tuple[int, str]]) -> List[Tuple[int, int]]' to handle the input parameters N (number of parts) and Q (number of queries). Initialize a list 'positions' of size N to store the coordinates of each part, starting with 'positions[i] = (i, 0)' for all i from 1 to N. Iterate through each query in the 'queries' list and check the type of query (either type 1 or type 2). For type 1 queries ('1 C'), update the head's position based on the direction C ('R', 'L', 'U', 'D') and move each subsequent part to the position of the part in front of it. For direction 'R', increment the x-coordinate of the head; for 'L', decrement the x-coordinate; for 'U', increment the y-coordinate; for 'D', decrement the y-coordinate. For type 2 queries ('2 p'), retrieve the coordinates of part p from the 'positions' list. Store the results of type 2 queries in a results list to be returned at the end of the function. Ensure that the function handles the maximum constraints efficiently, particularly for large values of N and Q. Implement error handling for invalid queries, ensuring that they conform to the specified input constraints. Return the results list containing the coordinates for all type 2 queries in the format 'List[Tuple[int, int]]'.