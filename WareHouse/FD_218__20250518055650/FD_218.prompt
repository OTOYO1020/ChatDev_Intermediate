Define the function 'shortest_distance_excluding_edge(N: int, M: int, edges: List[Tuple[int, int]]) -> List[int]' to handle the input parameters where N is the number of vertices, M is the number of edges, and edges is a list of tuples representing the directed edges. Parse the input to extract the values of N and M, and construct the list of edges from the input format. Implement a graph representation using an adjacency list to store the directed edges. For each edge i in the list of edges, temporarily remove that edge from the graph. Use a breadth-first search (BFS) or Dijkstra's algorithm to calculate the shortest distance from Vertex 1 to Vertex N after removing edge i. Store the result of the shortest distance for each edge removal in a list, initializing it with -1 for unreachable cases. Restore the removed edge after each iteration to ensure the graph remains intact for the next calculation. Return the list of shortest distances for all edges after processing all edges. Ensure that the function handles edge cases such as when N is 2 or when there are no edges. Format the output as a list of integers, where each integer represents the shortest distance or -1 for each edge removal.