Read the integer values for N (number of rounds) and X (minimum final grade) from standard input. Read the scores A_i for the first N-1 rounds into an array 'scores'. Sort the 'scores' array in ascending order. Calculate the current sum of the scores excluding the highest and lowest scores:\n   - If N = 3, sum the middle score.\n   - If N > 3, sum the scores from index 1 to N-2 in the sorted array. Determine the minimum score required in round N to achieve a final grade of at least X:\n   - Calculate the required total score as 'required_total = X + (highest_score + lowest_score)'.\n   - Compute the minimum score needed in round N as 'min_score_needed = required_total - current_sum'. Check if 'min_score_needed' is within the valid range of [0, 100]:\n   - If it is less than 0, set it to 0.\n   - If it is greater than 100, print '-1' as it is impossible to achieve the required grade. If 'min_score_needed' is valid, print the value. Handle edge cases where all scores are the same or where the required score is impossible to achieve. Ensure to validate input constraints (3 ≤ N ≤ 100, 0 ≤ X ≤ 100 × (N-2), 0 ≤ A_i ≤ 100). Print the result based on the calculations.