Read integers N and M from standard input, representing the number of vertices and edges, respectively. Initialize an adjacency list 'graph' to represent the undirected graph. For each edge (i from 1 to M):\n   - Read the vertices 'u_i' and 'v_i'.\n   - Add the edge to the adjacency list: 'graph[u_i].append(v_i)' and 'graph[v_i].append(u_i)'. Check if the number of edges M is equal to N - 1. If not, print NO and terminate (as a path graph must have exactly N - 1 edges). Initialize a set 'visited' to keep track of visited vertices during traversal. Perform a Depth-First Search (DFS) or Breadth-First Search (BFS) starting from vertex 1:\n   - Mark the current vertex as visited.\n   - For each neighbor of the current vertex, if it hasn't been visited, recursively visit it. After traversal, check if all vertices from 1 to N are visited. If not, print NO and terminate. Verify the path graph conditions:\n   - For each vertex, check that it has either 1 or 2 neighbors.\n   - If any vertex has more than 2 neighbors, print NO and terminate. If all checks are passed, print YES indicating the graph is a path graph. Ensure the output format is a single line with either YES or NO.