Define the function 'max_village_reached(N: int, K: int, friends: List[Tuple[int, int]]) -> int' to handle the input parameters where N is the number of friends, K is the initial amount of yen, and friends is a list of tuples containing (A_i, B_i). Parse the input to extract the values of N, K, and the list of friends (A_i, B_i) from the input format. Initialize a variable 'current_village' to 0 to represent Taro's starting village. Sort the list of friends based on the village A_i in ascending order to ensure Taro visits them in the correct order. Iterate through the sorted list of friends and for each friend at village A_i, check if Taro can reach that village with his current yen. If Taro can reach village A_i, update 'K' by subtracting the cost to reach A_i and add the yen B_i received from the friend. Continue this process until Taro can no longer reach any more friends or has visited all friends. Calculate the maximum village Taro can reach after visiting all possible friends, considering the remaining yen. Return the maximum village label as the output of the function. Ensure the output format is an integer representing the label of the last village Taro can reach.