Read integers N and K from standard input. Read the array A of size N, which contains the teleportation destinations for each town. Initialize a variable 'current_town' to 1, representing the starting town. Use a loop to simulate the teleportation process K times:\n   - For each iteration, update 'current_town' to 'A[current_town - 1]' (adjusting for 0-based indexing). Since K can be very large (up to 10^18), optimize the teleportation process using a cycle detection method (like Floyd's Tortoise and Hare algorithm) to find the eventual town after K teleportations. If a cycle is detected, calculate the effective number of teleportations needed to reach the final town. Output the final town number after K teleportations.\n\nThis approach ensures that we handle the constraints efficiently, especially given the large possible value of K.