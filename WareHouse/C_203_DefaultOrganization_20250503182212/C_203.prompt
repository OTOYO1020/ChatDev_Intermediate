Read the integers N and K from standard input. Read the list of pairs (A_i, B_i) for each friend, where A_i is the village number and B_i is the amount of yen given. Initialize a variable 'current_village' to 0 to represent Taro's starting position. Initialize a variable 'current_money' to K to represent the amount of yen Taro has. Sort the list of friends based on their village numbers A_i in ascending order. Loop through the sorted list of friends:\n   - For each friend at village A_i:\n     - Calculate the distance to reach A_i from 'current_village'.\n     - If 'current_money' is sufficient to reach A_i:\n       - Deduct the cost (distance) from 'current_money'.\n       - Add the yen B_i received from the friend to 'current_money'.\n       - Update 'current_village' to A_i. After visiting all reachable friends, calculate how far Taro can go with the remaining 'current_money' from 'current_village'. The last village Taro can reach is 'current_village + current_money'. Print the label of the last village reached.\n\nThis approach ensures that Taro maximizes his travel distance by strategically visiting friends who provide yen, while also considering the constraints of the problem.