Define the function 'countWays(N: int, K: int, segments: List[Tuple[int, int]]) -> int' to encapsulate the problem solution. Parse the input to extract the values of N, K, and the K segments [L_i, R_i]. Create a set S that contains all integers from the union of the K segments [L_i, R_i]. Implement a dynamic programming approach to calculate the number of ways to reach each cell from Cell 1 to Cell N using the set S. Initialize a list 'ways' of size N+1 with 'ways[1] = 1' and 'ways[i] = 0' for all other i. For each cell i from 1 to N, iterate through the set S and update 'ways[i + d]' for each d in S, ensuring not to exceed N. Apply modulo operation with 998244353 to keep the results within bounds during calculations. Return the value of 'ways[N]' as the final result, which represents the number of ways to reach Cell N. Ensure that all input values are validated according to the constraints provided in the problem statement. Output the result in the format specified, which is a single integer representing the number of ways modulo 998244353.