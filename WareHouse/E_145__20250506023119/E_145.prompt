Read integers N and T from standard input, followed by N pairs of integers (A_i, B_i) representing the time to eat and deliciousness of each dish. Initialize a list 'dishes' to store tuples of (A_i, B_i) for each dish. Sort the 'dishes' list based on the deliciousness B_i in descending order to prioritize dishes with higher happiness. Initialize a variable 'max_happiness' to track the maximum happiness achieved. Use a loop to iterate over the sorted 'dishes' list and simulate the eating process:\n   - For each dish, check if there is enough time left (T - 0.5) to eat the dish.\n   - If there is enough time, add the deliciousness B_i of the dish to 'max_happiness' and subtract the eating time A_i from the remaining time. Ensure that each dish is only counted once by maintaining a record of dishes already eaten. After processing all dishes, print the value of 'max_happiness' as the output.\n\nOutput format:\n- The output should be a single integer representing the maximum possible happiness.