Read six integers \( h_1, h_2, h_3, w_1, w_2, w_3 \) from standard input. Initialize a 3x3 grid to store the positive integers. Define a function 'count_ways(h, w)' that takes the row sums \( h \) and column sums \( w \) as arguments. In 'count_ways', implement a recursive backtracking algorithm to fill the grid:\n   - For each cell in the grid, try all possible positive integer values.\n   - Ensure that the current row and column sums do not exceed the specified \( h_i \) and \( w_j \). If a valid configuration is found (i.e., all rows and columns meet their respective sums), increment a counter for valid configurations. Return the total count of valid configurations from 'count_ways'. Call 'count_ways((h_1, h_2, h_3), (w_1, w_2, w_3))' to compute the number of ways to fill the grid. Print the result, which is the total number of valid configurations.\n\nOutput format:\n- The output will be a single integer representing the number of ways to fill the grid satisfying the conditions.