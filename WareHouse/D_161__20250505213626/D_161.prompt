Read the positive integer \( K \) from standard input. Initialize a list 'lunlun_numbers' to store lunlun numbers. Start a loop to generate lunlun numbers, beginning from the smallest lunlun number (1). For each number \( X \):\n   - Convert \( X \) to its string representation to analyze its digits.\n   - Check if the absolute difference between every pair of adjacent digits is at most 1. If \( X \) is a lunlun number, append it to the 'lunlun_numbers' list. Continue generating lunlun numbers until the length of 'lunlun_numbers' is equal to \( K \). Once \( K \) lunlun numbers are found, retrieve the \( K \)-th smallest lunlun number from the list. Print the \( K \)-th smallest lunlun number.\n\nIn this problem, the function to handle the generation and checking of lunlun numbers can be named 'find_kth_lunlun_number(K)', which will encapsulate the logic from steps 3 to 8. The output format will be the integer value of the \( K \)-th lunlun number printed to standard output.