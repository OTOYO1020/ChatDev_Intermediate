Define a function 'find_nth_repunits_sum(N: int) -> int' that takes an integer N as input. Implement a helper function 'generate_repunits(limit: int) -> List[int]' that generates repunits up to a specified limit. In 'find_nth_repunits_sum', use 'generate_repunits' to create a list of repunits that can be summed. Create a loop to iterate through combinations of three repunits and calculate their sums. Store the unique sums in a set to avoid duplicates. Convert the set of sums to a sorted list to facilitate finding the N-th smallest sum. Check if the length of the sorted list of sums is at least N; if not, handle the error appropriately. Return the N-th smallest sum from the sorted list. Ensure that the function handles the input constraints where N is between 1 and 333. Output the result in the format 'The N-th smallest sum is: {result}'.