Define the function 'count_good_sequences(M: int, pairs: List[Tuple[int, int]]) -> List[int]' to handle input parameters, where 'M' is the maximum integer and 'pairs' is a list of tuples containing pairs of integers '(A_i, B_i).' Parse the input to extract the integer 'M' and the list of pairs '[(A_1, B_1), (A_2, B_2), ..., (A_N, B_N)]'. Initialize a list 'f' of size 'M' to store the count of good sequences for each length from 1 to M. Iterate through each possible length 'k' from 1 to M and for each length, determine the valid contiguous subsequences that can be formed. For each length 'k', check if the subsequence contains at least one of the integers 'A_i' or 'B_i' for all pairs '(A_i, B_i)'. Maintain a sliding window or two-pointer technique to efficiently count the valid good sequences of length 'k'. Update the list 'f[k-1]' with the count of good sequences found for the current length 'k'. Repeat the process for all lengths from 1 to M to fill the list 'f'. Return the list 'f' as the output of the function, which contains the counts of good sequences for each length. Ensure that the output format is a list of integers corresponding to 'f(1), f(2), ..., f(M)'.