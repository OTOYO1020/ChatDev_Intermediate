Read integers N, K, R, S, P from standard input. Read the string T of length N, which contains the machine's moves. Initialize a variable 'max_score' to 0 to keep track of the maximum score. Create a list 'last_moves' to store the last K moves made by the player, initialized to an empty list. Loop through each round from 0 to N-1:\n   - Determine the machine's move from T[i].\n   - Based on the machine's move, decide the optimal move for the player while considering the restriction of not using the same move as in the (i-K)-th round.\n   - Update 'max_score' based on the chosen move:\n     - If the player chooses Rock and the machine plays Scissors, add R to 'max_score'.\n     - If the player chooses Scissors and the machine plays Paper, add S to 'max_score'.\n     - If the player chooses Paper and the machine plays Rock, add P to 'max_score'.\n   - Update 'last_moves' with the current move.\n   - Ensure that 'last_moves' only keeps the last K moves. After processing all rounds, print the 'max_score' as the output.