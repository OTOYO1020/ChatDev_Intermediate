Read integers N and M from standard input, representing the number of towns and roads, respectively. Initialize a list of roads, where each road is represented as a tuple (A_i, B_i, C_i) for each road i. For each road, read the values A_i, B_i, and C_i from standard input and store them in the roads list. Construct a graph representation using an adjacency list to represent the towns and their connections based on the roads. Implement a depth-first search (DFS) function 'dfs(town, visited)' to explore all possible paths from a given town without revisiting towns. In the DFS function, keep track of the total length of the roads traversed and update a global variable 'max_length' if the current path length exceeds it. Iterate over each town as a starting point and call the DFS function to explore all paths from that town. After exploring all towns, the maximum path length found will be stored in 'max_length'. Print the value of 'max_length' as the output.\n\nOutput format: The output should be a single integer representing the maximum possible total length of the roads traversed.