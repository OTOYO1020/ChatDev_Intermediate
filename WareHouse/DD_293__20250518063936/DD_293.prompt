Define the function 'count_cycles_and_non_cycles(N: int, M: int, operations: List[Tuple[int, str, int, str]]) -> Tuple[int, int]' to handle the input parameters. Create a data structure to represent the ropes and their connections, such as an adjacency list or a union-find structure. Implement a method to process each operation, tying the specified ends of the ropes according to the given colors. Ensure that no end with the same color is tied multiple times for each rope. After processing all operations, traverse the connected components of the graph to identify groups of connected ropes. Determine if each group of connected ropes forms a cycle by checking if the number of edges equals the number of vertices in that group. Count the total number of groups that form cycles and those that do not. Return the counts as a tuple from the function. Handle edge cases such as when M is 0, ensuring the function returns (0, N) in that case. Format the output as 'Number of cycles: X, Number of non-cycles: Y'.