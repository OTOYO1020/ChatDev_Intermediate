Define the function 'expected_value(A: List[int], K: int, M: int) -> int' to handle the input parameters where 'A' is the list of integers, 'K' is the index for expected value retrieval, and 'M' is the maximum integer value. Parse the input to extract the values of 'N', 'K', and 'M', and the sequence 'A' from the input format. Iterate through the list 'A' and for each element that is '0', replace it with a uniformly random integer between '1' and 'M'. Sort the modified list 'A' in ascending order. Calculate the expected value of 'A[K-1]' (the K-th element after sorting) based on the random replacements. Represent the expected value as a fraction 'P/Q' where 'P' and 'Q' are coprime integers. Compute the integer 'R' such that 'R * Q ≡ P (mod 998244353)' and '0 ≤ R < 998244353'. Return the value of 'R' as the output of the function. Ensure that all calculations involving modular arithmetic are performed correctly to avoid overflow. Test the function with various inputs to validate correctness and performance under the given constraints.