Read integers N and M from standard input, followed by M pairs of integers (u_i, v_i) representing the edges of the graph. Construct an adjacency list 'graph' to represent the undirected graph using the edges provided. Read integer K from standard input, followed by K pairs of integers (p_i, d_i) representing the vertices and their respective distances. Initialize a list 'distances' to store the minimum distances from each vertex to the nearest black-painted vertex. Implement a breadth-first search (BFS) algorithm to explore the graph and calculate the minimum distances from each vertex to any vertex that can be painted black. Check if there exists at least one vertex that can be painted black such that the minimum distance conditions for each (p_i, d_i) pair are satisfied. If a valid painting exists, create a list 'painted' to store the color (black or white) of each vertex. Assign colors to the vertices based on the conditions and ensure at least one vertex is painted black. Print the colors of the vertices in the required format. If no valid painting exists, print IMPOSSIBLE.