Define a function 'count_numbers_with_n_divisors(N: int, d: int) -> int' that takes an integer N and the number of divisors d (which is 9 in this case) as input. Implement a method to calculate the number of positive integers not greater than N that have exactly 9 positive divisors. Identify the mathematical properties of numbers with exactly 9 divisors, which can be either of the form p^8 or p^2 * q^2, where p and q are distinct prime numbers. Create a helper function 'is_prime(num: int) -> bool' to check if a number is prime, which will be used to find prime numbers up to a certain limit. Determine the upper limit for prime numbers needed to generate numbers with exactly 9 divisors based on the value of N. Generate a list of prime numbers up to the calculated upper limit using the Sieve of Eratosthenes algorithm. Count the valid integers of the form p^8 that are less than or equal to N. Count the valid integers of the form p^2 * q^2 that are less than or equal to N, ensuring p and q are distinct primes. Sum the counts from subtask 7 and subtask 8 to get the total count of integers with exactly 9 divisors. Return the result as an integer from the function 'count_numbers_with_n_divisors'.