Define the function 'calculate_probability(grid: List[List[int]]) -> float' to accept a 3x3 grid of integers as input. Implement input handling to read the grid values from standard input, ensuring they are integers between 1 and 9. Verify that the grid satisfies the constraints that no row, column, or diagonal contains the same number in all three cells. Create a function 'check_disappointment(grid: List[List[int]]) -> bool' to determine if Takahashi will get disappointed based on the current arrangement of numbers. Simulate the random viewing of the grid numbers and track the first two numbers seen and the third number to check for disappointment. Calculate the total number of arrangements of the grid and the number of arrangements that do not lead to disappointment. Compute the probability of Takahashi not getting disappointed by dividing the number of non-disappointing arrangements by the total arrangements. Format the output to return the probability as a float with appropriate precision. Ensure that the function handles edge cases, such as all numbers being the same or the grid being filled in a way that violates the constraints. Test the function with various grid configurations to validate correctness and adherence to the problem constraints.