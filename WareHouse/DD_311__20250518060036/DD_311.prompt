Define the function 'count_ice_squares(N: int, M: int, grid: List[str]) -> int' to handle the input parameters, where 'N' is the number of rows, 'M' is the number of columns, and 'grid' is a list of strings representing the grid. Initialize a variable 'visited' as a set to keep track of the ice squares the player has touched. Implement a helper function 'move_player(direction: str, current_position: Tuple[int, int]) -> Tuple[int, int]' to determine the new position of the player based on the specified direction (up, down, left, right). In the main function, start from the initial position '(2, 2)' and mark it as visited. Create a loop to allow the player to specify a direction and call the 'move_player' function until the player cannot move further due to hitting a rock. Within the movement loop, check if the next square in the direction of movement is ice; if so, update the current position and mark it as visited. If the next square is rock, break the loop and stop the movement in that direction. After all possible movements, return the size of the 'visited' set, which represents the number of unique ice squares touched by the player. Ensure that the function handles edge cases, such as when the grid size is at its minimum or maximum limits. Output the result as an integer representing the total number of ice squares the player can touch.