Define the function 'min_cost_to_form_string(N: int, bags: List[List[str]], T: str) -> int' to handle the input parameters where N is the number of bags, bags is a list of lists containing strings, and T is the target string. Initialize an empty string 'S' to represent the concatenated result. Iterate over each bag from 1 to N, and for each bag, retrieve the list of strings it contains. For each string in the current bag, check if concatenating it to 'S' can help form the target string 'T'. Maintain a variable 'min_cost' initialized to infinity to track the minimum cost required to form the string 'T'. For each valid concatenation that can lead to forming 'T', update 'min_cost' by adding 1 yen for each string selected. After processing all bags, check if 'min_cost' is still infinity; if so, return -1 indicating it's impossible to form 'T'. If 'min_cost' is not infinity, return the value of 'min_cost' as the minimum amount of money required. Ensure to handle edge cases where 'T' cannot be formed due to insufficient strings in the bags. Output the result of the function call in the format specified, either the minimum cost or -1.