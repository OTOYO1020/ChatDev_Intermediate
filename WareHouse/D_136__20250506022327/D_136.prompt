Read the input string \( S \) from standard input, ensuring it consists of characters 'L' and 'R' and has a length \( N \) between 2 and \( 10^5 \). Initialize an array 'children_count' of size \( N \) with all elements set to 1, representing one child on each square. Create a variable 'current_position' initialized to 0, representing the leftmost square where the first child starts. Loop \( 10^{100} \) times to simulate the movement of the children:\n   - For each iteration, check the character at 'current_position' in \( S \):\n     - If it is 'R', increment 'current_position' by 1 (move right).\n     - If it is 'L', decrement 'current_position' by 1 (move left).\n   - Ensure that 'current_position' remains within the bounds of the array (0 to \( N-1 \)). After completing the moves, count the number of children on each square by updating the 'children_count' array. Print the final counts of children on each square in the 'children_count' array.\n\nNote: Given the nature of the problem, the loop for \( 10^{100} \) iterations is impractical. Instead, derive the final positions based on the pattern of movements and directly calculate the result without simulating each move.