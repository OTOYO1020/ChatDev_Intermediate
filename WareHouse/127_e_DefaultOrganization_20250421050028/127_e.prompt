Receiving and initializing input: Receive integers N, M, and K from standard input. Also initialize the constant MOD = 10^9 + 7. The goal is to calculate the sum of distances (Manhattan distance) between pairs for all different configurations in which K pieces are placed on N * M squares. Precalculate the number of combinations: In order to efficiently calculate the number of combinations C(n, k) in which K pieces are selected from N * M squares, precalculate the factorial fact and inverse inv_fact under MOD. This makes it possible to obtain C(n, k) in O(1) in later processing. Calculate distance cost in row direction: For all pairs in which distance occurs in the same row (vertical direction), calculate the sum of |i1 - i2| for all (i1, i2), and add them with weights taking into account how many combinations each distance appears in. This can be calculated by aggregating the sum of the distance weights between all squares by multiplying it by the square of the number of columns M. Calculate distance cost in column direction: Similarly, for columns (horizontal direction), calculate the sum of |j1 - j2| for all (j1, j2) by multiplying it by the square of the number of rows N. Add up the weighted average of distance * number of patterns * C (remaining K-2). Calculate and output the total cost: Add up the distance costs in the row and column directions, divide by MOD = 10^9 + 7, and output the remainder. This is the sum of the Manhattan distances between all pairs in all K arrangements.