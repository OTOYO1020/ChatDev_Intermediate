Read the integer \( n \) from standard input, ensuring that \( 3 \leq n \leq 20 \). Read the permutation \( p \) of length \( n \) from standard input, ensuring it contains integers from \( 1 \) to \( n \) without duplicates. Initialize a counter variable 'count' to zero to track the number of valid elements \( p_i \). Iterate through the indices \( i \) from \( 2 \) to \( n-1 \) (inclusive) to evaluate each \( p_i \). For each \( p_i \), create a list 'neighbors' containing \( p_{i-1} \), \( p_i \), and \( p_{i+1} \). Sort the 'neighbors' list to determine the second smallest element. Check if \( p_i \) is equal to the second smallest element in the 'neighbors' list:\n   - If true, increment the 'count' by 1. After completing the loop, print the final value of 'count' as the output.