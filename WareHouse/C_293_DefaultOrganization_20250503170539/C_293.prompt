Read integers H and W from standard input, representing the dimensions of the grid. Initialize a 2D array 'A' of size H x W to store the integers written on each square. Populate the array 'A' by reading H rows of W integers from standard input. Define a recursive function 'count_paths(i, j, visited)' that takes the current position '(i, j)' and a set 'visited' of integers to track distinct values. In 'count_paths', check if the current position '(i, j)' is out of bounds or if the integer 'A[i][j]' has already been visited:\n   - If out of bounds or already visited, return 0.\n   - If at the bottom-right corner '(H, W)', return 1 (a valid path). Add 'A[i][j]' to the 'visited' set. Recursively call 'count_paths' for the adjacent squares: right '(i, j+1)' and down '(i+1, j)'. After recursive calls, remove 'A[i][j]' from the 'visited' set to backtrack. Sum the results of the recursive calls to get the total number of valid paths. Print the total number of paths that make Takahashi happy.