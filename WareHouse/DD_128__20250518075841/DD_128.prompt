Define the function 'max_jewel_sum(N: int, K: int, V: List[int]) -> int' to handle the input parameters where N is the number of jewels, K is the maximum number of operations, and V is the list of jewel values. Implement input handling to read integers N and K, and a list of integers V from standard input. Initialize a variable 'max_sum' to keep track of the maximum sum of jewel values collected. Create a deque to represent the jewels in D, initialized with the values from the list V. Implement a loop to perform at most K operations, where each operation can be A, B, C, or D. For Operation A, check if D is not empty, then take the leftmost jewel and add its value to a 'hand' list. For Operation B, check if D is not empty, then take the rightmost jewel and add its value to the 'hand' list. For Operation C, check if 'hand' is not empty, then remove a jewel from 'hand' and insert it to the left end of D. For Operation D, check if 'hand' is not empty, then remove a jewel from 'hand' and insert it to the right end of D. After performing the operations, calculate the sum of the values in 'hand' and update 'max_sum' if it's greater than the previous maximum, then return 'max_sum' as the output.