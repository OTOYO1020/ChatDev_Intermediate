Read integers N and M from standard input, followed by N pairs of coordinates (X_i, Y_i) for towns and M pairs of coordinates (P_i, Q_i) for chests. Initialize a list 'towns' to store the coordinates of the towns and a list 'chests' to store the coordinates of the chests. Calculate the Euclidean distance between two points using a helper function 'euclidean_distance(x1, y1, x2, y2)'. Generate all permutations of the towns to explore all possible visiting orders using 'itertools.permutations'. For each permutation of towns, calculate the total time taken to visit all towns and return to the origin:\n   - Initialize 'current_speed = 1' and 'current_time = 0'.\n   - For each town in the permutation, compute the distance from the current position to the town, update 'current_time', and update the current position.\n   - If a chest is encountered, double the 'current_speed'. After visiting all towns, compute the distance from the last town back to the origin and update 'current_time'. Track the minimum time across all permutations of towns. Print the minimum time required to complete the trip.\n\n### Function and Variable Names:\n- Function: 'euclidean_distance(x1, y1, x2, y2)'\n- Variables: 'towns', 'chests', 'current_speed', 'current_time', 'min_time'